{"ast":null,"code":"import * as api from '../api/api.js';\nimport * as actions from '../constants/actionTypes'; //action creators\n\nexport const getMovements = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchMovements();\n    const action = {\n      type: actions.FETCH_ALL_MOVEMENTS,\n      payload: data\n    };\n    dispatch(action);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createMovement = movement => async (dispatch, getState) => {\n  //async(dispatch) comes from redux-thunk\n  try {\n    const {\n      data\n    } = await api.createMovement(movement);\n    const action = {\n      type: actions.CREATE_MOVEMENT,\n      payload: data\n    };\n    dispatch(action);\n  } catch (error) {\n    console.log(error);\n  }\n\n  return {};\n};\nexport const updateMovement = updatedMovement => async (dispatch, getState) => {\n  try {\n    //because for some reason the server is not returning the object after patch\n    let valueOfAmount = parseFloat(updatedMovement.amount);\n    if (isNaN(valueOfAmount)) valueOfAmount = 0;\n    const movement = { ...updatedMovement,\n      amount: valueOfAmount\n    }; // const before = getState()\n    // console.log(' before dispatch: ', before)\n\n    await api.updateMovement(movement);\n    const action = {\n      type: actions.UPDATE_MOVEMENT,\n      payload: movement\n    };\n    dispatch(action); // const after = getState()\n    // console.log(' after dispatch: ', after)\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteMovement = movement_id => async (dispatch, getState) => {\n  try {\n    await api.deleteMovement(movement_id);\n    const action = {\n      type: actions.DELETE_MOVEMENT,\n      payload: movement_id\n    };\n    dispatch(action);\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/stephaniegera/Code/StephanieGeraAmil/Projects/copyclient/src/actions/MovementsActions.js"],"names":["api","actions","getMovements","dispatch","data","fetchMovements","action","type","FETCH_ALL_MOVEMENTS","payload","error","console","log","createMovement","movement","getState","CREATE_MOVEMENT","updateMovement","updatedMovement","valueOfAmount","parseFloat","amount","isNaN","UPDATE_MOVEMENT","deleteMovement","movement_id","DELETE_MOVEMENT"],"mappings":"AACA,OAAO,KAAKA,GAAZ,MAAqB,eAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB,C,CAGA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAI,MAAMC,QAAN,IAAiB;AAC7C,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAQ,MAAMJ,GAAG,CAACK,cAAJ,EAApB;AACA,UAAMC,MAAM,GAAC;AAACC,MAAAA,IAAI,EAAEN,OAAO,CAACO,mBAAf;AAAoCC,MAAAA,OAAO,EAACL;AAA5C,KAAb;AACAD,IAAAA,QAAQ,CAACG,MAAD,CAAR;AACH,GAJD,CAIE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ,CATM;AAUP,OAAO,MAAMG,cAAc,GAAEC,QAAD,IAAY,OAAMX,QAAN,EAAeY,QAAf,KAA0B;AAC9D;AACA,MAAI;AAEA,UAAM;AAACX,MAAAA;AAAD,QAAQ,MAAMJ,GAAG,CAACa,cAAJ,CAAmBC,QAAnB,CAApB;AACA,UAAMR,MAAM,GAAC;AAACC,MAAAA,IAAI,EAAEN,OAAO,CAACe,eAAf;AAAgCP,MAAAA,OAAO,EAACL;AAAxC,KAAb;AACAD,IAAAA,QAAQ,CAACG,MAAD,CAAR;AAGH,GAPD,CAOE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,SAAM,EAAN;AACH,CAbM;AAiBP,OAAO,MAAMO,cAAc,GAAEC,eAAD,IAAmB,OAAMf,QAAN,EAAeY,QAAf,KAA0B;AAErE,MAAI;AAEA;AACA,QAAII,aAAa,GAACC,UAAU,CAACF,eAAe,CAACG,MAAjB,CAA5B;AACA,QAAGC,KAAK,CAACH,aAAD,CAAR,EAAwBA,aAAa,GAAC,CAAd;AACxB,UAAML,QAAQ,GAAC,EAAC,GAAGI,eAAJ;AAAqBG,MAAAA,MAAM,EAACF;AAA5B,KAAf,CALA,CAOA;AACA;;AACA,UAAMnB,GAAG,CAACiB,cAAJ,CAAmBH,QAAnB,CAAN;AAEA,UAAMR,MAAM,GAAC;AAACC,MAAAA,IAAI,EAAEN,OAAO,CAACsB,eAAf;AAAgCd,MAAAA,OAAO,EAACK;AAAxC,KAAb;AACAX,IAAAA,QAAQ,CAACG,MAAD,CAAR,CAZA,CAaA;AACA;AAEH,GAhBD,CAgBE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CArBM;AAuBP,OAAO,MAAMc,cAAc,GAAEC,WAAD,IAAe,OAAMtB,QAAN,EAAeY,QAAf,KAA0B;AACjE,MAAI;AAEA,UAAMf,GAAG,CAACwB,cAAJ,CAAmBC,WAAnB,CAAN;AACA,UAAMnB,MAAM,GAAC;AAACC,MAAAA,IAAI,EAAEN,OAAO,CAACyB,eAAf;AAA+BjB,MAAAA,OAAO,EAACgB;AAAvC,KAAb;AACAtB,IAAAA,QAAQ,CAACG,MAAD,CAAR;AAGH,GAPD,CAOE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAXM","sourcesContent":["\nimport * as api from '../api/api.js';\nimport * as actions from '../constants/actionTypes';\n\n\n//action creators\nexport const getMovements = ()=>async(dispatch)=>{\n    try {\n        const {data}= await api.fetchMovements();\n        const action={type: actions.FETCH_ALL_MOVEMENTS, payload:data};\n        dispatch(action);\n    } catch (error) {\n        console.log(error);\n    }\n   \n}\nexport const createMovement=(movement)=>async(dispatch,getState)=>{\n    //async(dispatch) comes from redux-thunk\n    try {\n       \n        const {data} =await api.createMovement(movement);\n        const action={type: actions.CREATE_MOVEMENT, payload:data};\n        dispatch(action);\n       \n        \n    } catch (error) {\n        console.log(error);\n    }\n    return{}\n}\n\n\n\nexport const updateMovement=(updatedMovement)=>async(dispatch,getState)=>{\n  \n    try {\n\n        //because for some reason the server is not returning the object after patch\n        let valueOfAmount=parseFloat(updatedMovement.amount);\n        if(isNaN(valueOfAmount))valueOfAmount=0;\n        const movement={...updatedMovement, amount:valueOfAmount}\n      \n        // const before = getState()\n        // console.log(' before dispatch: ', before)\n        await api.updateMovement(movement);\n    \n        const action={type: actions.UPDATE_MOVEMENT, payload:movement};\n        dispatch(action);\n        // const after = getState()\n        // console.log(' after dispatch: ', after)\n        \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deleteMovement=(movement_id)=>async(dispatch,getState)=>{\n    try {\n      \n        await api.deleteMovement(movement_id);\n        const action={type: actions.DELETE_MOVEMENT,payload:movement_id};\n        dispatch(action);\n      \n        \n    } catch (error) {\n        console.log(error);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}