{"ast":null,"code":"import * as actiontypes from '../constants/actionTypes';\nexport default (function () {\n  let movements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actiontypes.CREATE_MOVEMENT:\n      //return the action or the state changed by the action\n      return [...movements, action.payload];\n\n    case actiontypes.UPDATE_MOVEMENT:\n      return movements.map(movement => movement._id === action.payload._id ? action.payload : movement);\n\n    case actiontypes.DELETE_MOVEMENT:\n      return movements.filter(movement => movement._id != action.payload);\n\n    case actiontypes.FETCH_ALL_MOVEMENTS:\n      return action.payload;\n\n    default:\n      return movements;\n  }\n});","map":{"version":3,"sources":["/Users/stephaniegera/Code/StephanieGeraAmil/Projects/copyclient/src/reducers/MovementsReducer.js"],"names":["actiontypes","movements","action","type","CREATE_MOVEMENT","payload","UPDATE_MOVEMENT","map","movement","_id","DELETE_MOVEMENT","filter","FETCH_ALL_MOVEMENTS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,0BAA7B;AAEA,gBAAe,YAAwB;AAAA,MAAvBC,SAAuB,uEAAb,EAAa;AAAA,MAATC,MAAS;;AACnC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKH,WAAW,CAACI,eAAjB;AACA;AACA,aAAO,CAAC,GAAGH,SAAJ,EAAeC,MAAM,CAACG,OAAtB,CAAP;;AAEA,SAAKL,WAAW,CAACM,eAAjB;AACA,aAAOL,SAAS,CAACM,GAAV,CAAeC,QAAD,IAAYA,QAAQ,CAACC,GAAT,KAAeP,MAAM,CAACG,OAAP,CAAeI,GAA9B,GAAmCP,MAAM,CAACG,OAA1C,GAAoDG,QAA9E,CAAP;;AAEA,SAAKR,WAAW,CAACU,eAAjB;AACA,aAAOT,SAAS,CAACU,MAAV,CAAkBH,QAAD,IAAYA,QAAQ,CAACC,GAAT,IAAcP,MAAM,CAACG,OAAlD,CAAP;;AAEA,SAAKL,WAAW,CAACY,mBAAjB;AACA,aAAOV,MAAM,CAACG,OAAd;;AAEA;AACA,aAAOJ,SAAP;AAfJ;AAmBH,CApBD","sourcesContent":["import * as actiontypes from '../constants/actionTypes'\n\nexport default (movements=[], action)=>{\n    switch(action.type){\n        case actiontypes.CREATE_MOVEMENT:\n        //return the action or the state changed by the action\n        return [...movements, action.payload];\n        \n        case actiontypes.UPDATE_MOVEMENT:\n        return movements.map((movement)=>movement._id===action.payload._id? action.payload : movement);\n      \n        case actiontypes.DELETE_MOVEMENT:\n        return movements.filter((movement)=>movement._id!=action.payload);\n\n        case actiontypes.FETCH_ALL_MOVEMENTS:\n        return action.payload;\n        \n        default:\n        return movements\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}